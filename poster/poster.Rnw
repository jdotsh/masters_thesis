\documentclass[final,hyperref={pdfpagelabels=true}]{beamer}

\usepackage{TUINFPST}

\usepackage{acronym}
\usepackage[backend=bibtex,sortcites=true,maxnames=99]{biblatex}
\usepackage{booktabs}
\usepackage{comment}
\usepackage{hyperref}
\usepackage{lipsum}
\usepackage{listings}
\usepackage{ragged2e}
\usepackage{subcaption}
\usepackage{tikz}
\usepackage{xspace}

\newcommand{\klsm}{$k$-LSM\xspace}

\title[Software Engineering \& Internet Computing]{
  \klsm:\\
  \vspace{4mm}
  A Relaxed Lock-Free Priority Queue
}
\author[gruber@par.tuwien.ac.at]{Jakob Gruber}
\institute[]{%
  Technische Universit{\"a}t Wien\\[0.25\baselineskip]
  Institut f{\"u}r Informationssysteme\\[0.25\baselineskip]
  Arbeitsbereich: Parallel Computing\\[0.25\baselineskip]
  Betreuer: Prof. Dr. Scient. Jesper Larsson Tr\"aff
}
\titlegraphic{\includegraphics[height=52mm, width=52mm]{parcomp_logo}}
\date[\today]{\today}
\subject{epilog}
\keywords{concurrency, algorithms, lock-free, relaxed, priority queue}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\setbeamercolor{block body}{fg=black,bg=white}
\setbeamercolor{block title}{fg=white,bg=TuWienBlue}

\setbeamertemplate{block begin}{
  \begin{beamercolorbox}{block title}%
    \begin{tikzpicture}%
      \node[draw,rectangle,line width=3pt,rounded corners=0pt,inner sep=0pt]{%
        \begin{minipage}[c][2cm]{\linewidth}
          \centering\textbf{\insertblocktitle}
        \end{minipage}
      };
    \end{tikzpicture}%
  \end{beamercolorbox}
  \vspace*{1cm}
  \begin{beamercolorbox}{block body}%
}

\setbeamertemplate{block end}{
  \end{beamercolorbox}
  \vspace{2cm}
}

% for crop marks, uncomment the following line
\usepackage[cross,width=88truecm,height=123truecm,center]{crop}

\usetikzlibrary{ arrows
               , automata
               , backgrounds
               , calc
               , chains
               , fit
               , mindmap
               , petri
               , shapes
               , topaths
               }

\input{acronyms}
\bibliography{bibliography.bib}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}

\tikzstyle{box} =
    [ draw,
    , rectangle,
    , text centered,
    , minimum width = 5mm,
    , minimum height = 5mm,
    , font = \footnotesize,
    , fill = black!10
    ]

\tikzstyle{deleted_box} =
    [ draw,
    , rectangle,
    , text centered,
    , minimum width = 5mm,
    , minimum height = 5mm,
    , font = \footnotesize,
    , text = black!50
    ]

\tikzstyle{flag_true} =
    [ draw,
    , circle,
    , inner sep = 0mm,
    , text width = 0.75mm,
    , fill = black
    ]

\tikzstyle{flag_false} =
    [ draw,
    , circle,
    , inner sep = 0mm,
    , text width = 0.75mm,
    ]

\begin{frame}
\begin{columns}[t]
% ---------------------------------------------------------%
\begin{column}{.45\textwidth}
\begin{block}{Concurrent Priority Queues}
\begin{itemize}
\justifying
\item \textbf{Priority queues}: Abstract data structures which store a set of key/value pairs;
efficient access to the item with the minimal (maximal) key.

\item \textbf{Concurrent priority queues}: Developed from early locking heaps,
through lock-free SkipList-based designs, to modern research into relaxed priority queues.

\item \textbf{Lock-freedom}: A strong progress condition, has been shown to be
efficient in practice.

\item \textbf{Relaxation}: An approach which weakens semantic guarantees in return for
higher efficience and/or scalability; especially useful in the context of
priority queues to lessen the global bottleneck at the minimal (maximal) element.
\end{itemize}
\end{block}

\begin{block}{The \klsm}

\begin{figure}[ht]
\centering
\begin{tikzpicture}[mindmap,
  level 1 concept/.append style={level distance = 300, text width = 200, minimum size = 200, sibling angle = 60},
  level 2 concept/.append style={level distance = 250, text width = 150, minimum size = 155, sibling angle = 45},
  extra concept/.append style={color=blue!50, text=black}]

  \begin{scope}[mindmap, concept color = black!10]
    \node [concept, text width = 200] {\klsm}[clockwise from=-60]
      child {node [concept] (dlsm) {\ac{DLSM}}
        [clockwise from = 75]
        child {node [concept] {Thread-local}}
        child {node [concept] {Distributed}}
        child {node [concept] {Efficient}}
        child {node [concept] {Scalable}}
        child {node [concept] {Strict}}}
      child {node [concept] (slsm) {\ac{SLSM}}
        [clockwise from = -90]
        child {node [concept] {Shared}}
        child {node [concept] {Global}}
        child {node [concept] {Relaxed}}
        child {node [concept] {Global Bottleneck}}};
  \end{scope}
\end{tikzpicture}
\end{figure}

\justifying
The \textbf{\klsm} is a relaxed, linearizable and lock-free priority queue design by
Wimmer, composed of two independent but
complementary priority queues: the \ac{SLSM}, a centralized queue with strong
guarantees but limited performance; and the \ac{DLSM}, a distributed design without
global guarantees but having very high throughput.
\begin{itemize}
\justifying
\item \textbf{Linearizable}: Each operation appears to take effect at some instant
in time within the operation invocation.

\item \textbf{Lock-free}: No blocking primitives are used, at least one
process makes progress at all times.

\item \textbf{Relaxed}: Deletions may return one of the $kP$ minimal items, where
$k$ is a configuration parameter and $P$ is the number of threads.

\item \textbf{Cache-efficient}: Usage of arrays and the standard merge algorithm
result in good cache locality properties and high performance.
\end{itemize}

\end{block}

\begin{block}{Publications}
\nocite{wimmer2015lock}
\printbibliography
\end{block}
\end{column}
% ---------------------------------------------------------%

% ---------------------------------------------------------%
\begin{column}{.45\textwidth}

\begin{block}{Our Implementation}
\justifying
Previously only available as part of the task-scheduling framework \textbf{Pheet},
we have implemented an efficient standalone version
of the \klsm. Our implementation is:

\begin{itemize}
\justifying
\item \textbf{Scalable}: Under ideal circumstances and with sufficient
relaxation, the \klsm scales until the maximal thread-count on all tested
machines.

\item \textbf{Performant}: Outperforms the best other concurrent
priority queues by up to a factor of ten.

\item \textbf{Maintainable}: Uses classical software
engineering concepts such as composability, readability, and separation of concerns.

\item \textbf{Portable}: Implemented using C++11 atomics without reliance on external libraries.
\end{itemize}
\end{block}

\begin{block}{Results}
\begin{itemize}
\justifying
\item \textbf{Algorithms}: Evaluated against other state of the art designs, including
the SprayList (relaxed, lock-free, probabilistic guarantees), the
Lind\'en queue (strict, lock-free, linearizable), and
Multiqueues (relaxed, lock-based, no guarantees).

\item \textbf{Benchmarks}:
Extensive evaluation under a variety of experiments, including balanced and unbalanced
workloads combined with different key generation algorithms. We demonstrate
that these parameters have a high impact on some data structures.

\item \textbf{Throughput benchmarks} measure performance in millions of operations per second.
Results are varied: in evenly distributed settings, the \klsm outperforms all
other data structures by a factor of 10, while in others, performance suffers since
more stress is placed on the centralized \ac{SLSM}.

\vspace{1cm}

<<echo = FALSE>>=
\SweaveInput{pqplot.Rnw}
@

\begin{figure}[ht]
\begin{center}
<<fig = TRUE, width = 11, echo = FALSE>>=
pqplot("results/20151112_mars_uni_uni")
@
\end{center}
\end{figure}
\item \textbf{Quality benchmarks} measure ranks of returned items, e.g., for each returned item,
how many other items within the priority queue were skipped when determining it as the minimal item.
The \klsm more than fulfills its semantic guarantees, usually delivering results
within the best fifth percentile.
\end{itemize}

\vspace{5mm}

\begin{table}[ht]
\begin{center}
\begin{tabular}{lrrrrrr}
& \multicolumn{2}{c}{20 threads} & \multicolumn{2}{c}{40 threads} & \multicolumn{2}{c}{80 threads} \\
\cmidrule(r){2-3}\cmidrule(r){4-5}\cmidrule(r){6-7}
Rank Error & Mean & StdDev & Mean & StdDev& Mean & StdDev\\
\midrule%
\texttt{globallock} & 1.9 & 1.0 & 2.9 & 1.7 & 4.8 & 2.9 \\
\texttt{klsm128}  & 33 & 31 & 55 & 46 & 430 & 294 \\
\texttt{klsm256}  & 42 & 42 & 71 & 61 & 750 & 828 \\
\texttt{klsm4096} & 297 & 496 & 625 & 1014 & 10353 & 12667 \\
\texttt{multiq}   & 984 & 2899 & 2252 & 7433 & 3787 & 12549 \\
\bottomrule
\end{tabular}
\end{center}
\label{tbl:mars_uni_uni_q}
\end{table}

\end{block}
\end{column}
% ---------------------------------------------------------%
\end{columns}

\end{frame}
\end{document}
