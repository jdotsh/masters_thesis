\documentclass[usenames,dvipsnames]{beamer}

\usepackage{acronym}
\usepackage[backend=bibtex]{biblatex}
\usepackage{booktabs}
\usepackage{comment}
\usepackage{default}
\usepackage{graphicx}
\usepackage[utf8]{inputenc}
\usepackage{listings}
\usepackage{lmodern}
\usepackage{nameref}
\usepackage{pgf}
\usepackage{subcaption}
\usepackage{textcomp}
\usepackage{tikz}
\usepackage{xspace}

\graphicspath{{figures/}}
\input{acronyms}
\bibliography{bibliography.bib}

\setbeamertemplate{bibliography item}{}

\lstset{
    language=C++,
    basicstyle=\ttfamily \small,
    keywordstyle=\color{OliveGreen},
    commentstyle=\color{Gray},
    captionpos=b,
    breaklines=true,
    breakatwhitespace=false,
    showspaces=false,
    showtabs=false,
    numbers=none,
}

\usetikzlibrary{ arrows
               , automata
               , backgrounds
               , calc
               , chains
               , fit
               , mindmap
               , petri
               , shapes
               , topaths
               }

\newcommand{\klsm}{$k$-LSM\xspace}

\title{\klsm}
\subtitle{A Relaxed Lock-Free Priority Queue}
\author{Jakob Gruber}
\date{\today}

\begin{document}

\tikzstyle{box} =
    [ draw,
    , rectangle,
    , text centered,
    , minimum width = 5mm,
    , minimum height = 5mm,
    , font = \footnotesize,
    , fill = black!10
    ]

\tikzstyle{deleted_box} =
    [ draw,
    , rectangle,
    , text centered,
    , minimum width = 5mm,
    , minimum height = 5mm,
    , font = \footnotesize,
    , text = black!50
    ]

\tikzstyle{flag_true} =
    [ draw,
    , circle,
    , inner sep = 0mm,
    , text width = 0.75mm,
    , fill = black
    ]

\tikzstyle{flag_false} =
    [ draw,
    , circle,
    , inner sep = 0mm,
    , text width = 0.75mm,
    ]

\maketitle

\begin{comment}
In general:
* less background. Mention some examples, add CBPQ, but less detail and time.
  Candidates: linden, multiq, spraylist.
* more about klsm. Principles, ideas (show the merge figure), architecture,
  implementation.
* more benchmarks. Different benchmark types, possibly add discussion points to
  slides.
  
* Way too much content. Possibly remove large parts of background and related work.
* Highlight more what I did.
\end{comment}

% --------------------------------------------------------------------------------------------------
\section{Introduction} \label{sec:intro}
% --------------------------------------------------------------------------------------------------

<<echo = FALSE>>=
library(RColorBrewer)
library(Rmisc)
library(ggplot2)
library(grid)
library(plyr)
library(scales)
library("xtable")

pqplot <- function(csvfile) {
    # install.packages(c("Rmisc", "ggplot2", "plyr"))

    df <- read.csv(csvfile)
    colnames(df) <- c("kernel", "p", "throughput")

    df$throughput <- df$throughput/1E6

    pqplot_frame(df)
}

pqplot_frame <- function(df) {
    pq_colors <- brewer.pal(8, "Dark2")
    names(pq_colors) <- c("klsm128", "klsm256", "klsm4096", "linden", "multiq", "globallock", "spray")
    pqplot_frame_palette(df, pq_colors)
}

pqplot_frame_palette <- function(df, palette) {
    df2 <- ddply(df, .(kernel, p), summarize, mean = mean(throughput),
                 lower = CI(throughput)[[3]], upper = CI(throughput)[[1]])

    p <- ggplot(df2, aes(x = p, y = mean, color = kernel, shape = kernel)) +
                geom_line() +
                geom_point(size = 3) +
                geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.3) +
                scale_y_continuous(limits = c(0, NA), oob = squish) +
                scale_colour_manual(name = "kernel", values = palette) +
                ylab("Throughput in Mops/s") +
                xlab("Number of threads") +
    # Themes
                theme_bw() +
                theme(axis.text = element_text(size = 16),
                      axis.title = element_text(size = 18),
                      legend.text = element_text(size = 16),
                      legend.title = element_text(size = 18),
                      legend.position = c(0, 1),
                      legend.justification = c(0, 1),
                      legend.background = element_rect(fill = alpha("black", 0)),
                      plot.margin = unit(c(0,0,0,0), "mm"))

    plot(p)
}

filter_results_to <- function(filename, algorithms) {
    df <- read.csv(filename)
    colnames(df) <- c("kernel", "p", "throughput")
    df$throughput <- df$throughput/1E6

    return (df[df$kernel %in% algorithms, ])
}

filter_results <- function(filename) {
    return (filter_results_to(filename, c("klsm128", "klsm256", "klsm4096", "linden", "multiq", "globallock")))
}

gen_table <- function(filename, thread_counts) {
    df <- read.csv(filename)

    colnames(df) <- c("kernel", "p", "mean", "max", "stdev")
    df$max <- NULL

    df <- subset(df, p %in% thread_counts)

    kernel_summary <- function(df, kernel) {
        return(c( kernel
                , round(df[df$p == thread_counts[1] & df$kernel == kernel, 3], 0)
                , round(df[df$p == thread_counts[1] & df$kernel == kernel, 4], 0)
                , round(df[df$p == thread_counts[2] & df$kernel == kernel, 3], 0)
                , round(df[df$p == thread_counts[2] & df$kernel == kernel, 4], 0)
                , round(df[df$p == thread_counts[3] & df$kernel == kernel, 3], 0)
                , round(df[df$p == thread_counts[3] & df$kernel == kernel, 4], 0)
                ))
    }

    df2 <- rbind( kernel_summary(df, "klsm256")
                , kernel_summary(df, "klsm4096")
                , kernel_summary(df, "multiq")
                )

    colnames(df2) <- c(" ", "Mean", "SD", "Mean", "SD", "Mean", "SD")

    return(df2)
}

print_table <- function(filename, thread_counts) {
    df <- gen_table(filename, thread_counts)

    print(xtable(df, align = "llrrrrrr"),
        floating = FALSE,
        hline.after = NULL,
        include.rownames = FALSE,
        add.to.row = list(
            pos = list(-1, 0, nrow(df)),
            command = c( paste( "\\toprule\n& \\multicolumn{2}{c}{"
                              , thread_counts[1]
                              , " threads} & \\multicolumn{2}{c}{"
                              , thread_counts[2]
                              , " threads} & \\multicolumn{2}{c}{"
                              , thread_counts[3]
                              , " threads} \\\\ \\cmidrule(r){2-3}\\cmidrule(r){4-5}\\cmidrule(r){6-7}", sep = "")
                       , "\\midrule\n"
                       , "\\bottomrule\n")))
}
@

\begin{frame}{\nameref{sec:intro}}
\framesubtitle{The \klsm}

\begin{itemize}
\item Concurrent priority queue by Wimmer
\item \emph{Lock-free}: Progress condition. At least one thread makes progress at any time.
\item \emph{Linearizable}: Safety condition. Operations appear to take effect at one instant in time.
\item \emph{Relaxed}: Deletions may return one of $kP$ smallest elements 
      ($k$ is configurable, $P$ is the thread count).
\end{itemize}
\end{frame}

\begin{frame}{\nameref{sec:intro}}
\framesubtitle{Motivation}

\begin{figure}[ht]
\begin{center}
\only<1>{
<<fig = TRUE, width = 10, echo = FALSE>>=
pqplot_frame(filter_results_to("results/20151112_mars_uni_uni", c("globallock")))
@
}
\only<2>{
<<fig = TRUE, width = 10, echo = FALSE>>=
pqplot_frame(filter_results_to("results/20151112_mars_uni_uni", c("globallock", "linden")))
@
}
\only<3>{
<<fig = TRUE, width = 10, echo = FALSE>>=
pqplot_frame(filter_results_to("results/20151112_mars_uni_uni", c("globallock", "linden", "multiq")))
@
}
\only<4>{
<<fig = TRUE, width = 10, echo = FALSE>>=
pqplot_frame(filter_results_to("results/20151112_mars_uni_uni", c("globallock", "linden", "multiq", "klsm4096")))
@
}
\end{center}
\caption{Throughput on \lstinline|mars|, uniform workload, uniform key generation.}
\end{figure}
  
\end{frame}

\begin{frame}{\nameref{sec:intro}}
\framesubtitle{Contents}

\begin{itemize}
\item Background.
\item Related work.
\item The \klsm design.
\item Results.
\end{itemize}

\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}[fragile]{\nameref{sec:intro}}
\framesubtitle{Sequential priority queues}

\acp{PQ}:

\begin{itemize}
\item Standard abstract data structure.
\item Interface consists of two $O(\log n)$ operations:

\begin{lstlisting}
void insert(const K &key, const V &val);
bool delete_min(V &val);
\end{lstlisting}

\item Typical backing data structures: heaps \& search trees.
\end{itemize}

\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:intro}}
\framesubtitle{In this thesis}

Previously, \klsm only part of task-scheduling framework \emph{Pheet}.

\begin{itemize}
\item Standalone reimplementation (C++11, 4800 SLOC).
\item Extensive evaluation against related structures on multiple machines.
\item Different benchmarks demonstrate behavioral changes.
\item Semantic quality benchmarks show results are within theoretical bounds.
\end{itemize}
\end{frame}

% --------------------------------------------------------------------------------------------------
\section{Related Work} \label{sec:related}
% --------------------------------------------------------------------------------------------------

\begin{frame}{\nameref{sec:related}}
\begin{itemize}
\item Strict concurrent \acp{PQ}
    \begin{itemize}
    \item \citeauthor{hunt1996efficient}: Fine-grained locking heap.
    \item \citeauthor{shavit2000skiplist}: First SkipList-based \ac{PQ}.
    \item \citeauthor{sundell2003fast}: First lock-free \ac{PQ}.
    \item \citeauthor{linden2013skiplist}: Minimizes contention.
    \item \citeauthor{cbpq}: List of arrays, efficient.
    \end{itemize}

\item Relaxed concurrent \acp{PQ}
    \begin{itemize}
    \item \citeauthor{alistarhspraylist}: SprayList.
    \item \citeauthor{rihani2014multiqueues}: Multiqueues.
    \item \citeauthor{wimmer2013data}: k-\ac{LSM}.
    \end{itemize}

\end{itemize}
\end{frame}

% --------------------------------------------------------------------------------------------------
\section{Relaxed Priority Queues} \label{sec:relaxed}
% --------------------------------------------------------------------------------------------------

\begin{frame}{\nameref{sec:relaxed}}

\begin{itemize}
\item Strict \acp{PQ} have inherent bottleneck at minimal element.
\item Another approach is to relax semantics, i.e. instead of returning \emph{the} minimal element,
      return one of the $k$ minimal elements.
\end{itemize}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:relaxed}}
\framesubtitle{\citeauthor{alistarhspraylist}: SprayList}

\begin{figure}
\centering
\begin{tikzpicture}[
    ->,
    start chain,
    every node/.style={font = \small},
    item/.style= box,
    label/.style={rectangle,minimum size = 5mm}
    ]

    \node[box] (3a) at (0, 15mm) {}; \node[box] (3h) at (70mm, 15mm) {};

    \node[box] (2a) at (0, 10mm) {}; \node[box] (2c) at (20mm, 10mm) {};
    \node[box] (2e) at (40mm, 10mm) {}; \node[box] (2h) at (70mm, 10mm) {};

    \node[box] (1a) at (0, 5mm) {}; \node[box] (1c) at (20mm, 5mm) {};
    \node[box] (1d) at (30mm, 5mm) {}; \node[box] (1e) at (40mm, 5mm) {}; \node[box] (1f) at (50mm, 5mm) {};
    \node[box] (1h) at (70mm, 5mm) {};

    \node[box] (0a) at (0, 0) {H}; \node[box] (0b) at (10mm, 0) {0}; \node[box] (0c) at (20mm, 0) {1};
    \node[box] (0d) at (30mm, 0) {2}; \node[box] (0e) at (40mm, 0) {3}; \node[box] (0f) at (50mm, 0) {4};
    \node[box] (0g) at (60mm, 0) {5}; \node[box] (0h) at (70mm, 0) {T};

    {
    [start chain] \chainin(0a); \chainin(0b) [join]; \chainin(0c) [join]; \chainin(0d) [join]; \chainin(0e) [join]; \chainin(0f) [join]; \chainin(0g) [join]; \chainin(0h) [join];
    [start chain] \chainin(1a); \chainin(1c) [join]; \chainin(1d) [join]; \chainin(1e) [join]; \chainin(1f) [join]; \chainin(1h) [join];
    [start chain] \chainin(2a); \chainin(2c) [join]; \chainin(2e) [join]; \chainin(2h) [join];
    [start chain] \chainin(3a); \chainin(3h) [join];
    }

    \begin{scope}[on background layer]
        \draw[gray, thick, dashed] (6mm, -4mm) rectangle (34mm, 19mm);
    \end{scope}
\end{tikzpicture}
\caption{The SprayList is based on a lock-free SkipList. Deletions randomly pick
         one of the $O(P \log^3 P)$ smallest items.}
\end{figure}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:relaxed}}
\framesubtitle{\citeauthor{rihani2014multiqueues}: Multiqueues}

\begin{figure}
\centering
\begin{tikzpicture}[start chain,
    ->,
    every node/.style={font = \small},
    label/.style={rectangle,minimum size = 5mm}]

    \begin{scope}[start chain = 1 going right, node distance = -0.15mm]
        \node [on chain=1, minimum width = 10mm] (ba0) {$q_0$};
        \node [on chain=1, minimum width = 10mm] (ba1) {$q_1$};
        \node [on chain=1, minimum width = 10mm] (ba2) {$q_2$};
        \node [on chain=1, minimum width = 10mm] (ba3) {$q_3$};
        \node [on chain=1, minimum width = 10mm] (ba4) {$q_4$};
        \node [on chain=1, minimum width = 10mm] (ba5) {$q_5$};
    \end{scope}

    \begin{scope}[start chain = 2 going {above=of \tikzchainprevious.north},
            every on chain/.style={anchor=south},
            node distance = -0.15mm]
        \node[on chain, box, above = of ba0, yshift = 3mm] (00) {0};
        \node[on chain, box] {2};
        \node[on chain, box] {1};
        \node[on chain, box] {4};
        \node[on chain, box] {6};
        \node[on chain, box] {5};
        \node[on chain, box] {3};
        \node[on chain, box] {7};
        \node[on chain, box] {8};
    \end{scope}

    \begin{scope}[start chain = 3 going {above=of \tikzchainprevious.north},
            every on chain/.style={anchor=south},
            node distance = -0.15mm]
        \node[on chain, box, above = of ba1, yshift = 3mm] (10) {3};
        \node[on chain, box] {5};
        \node[on chain, box] {4};
        \node[on chain, box] {7};
        \node[on chain, box] {8};
        \node[on chain, box] {5};
    \end{scope}

    \begin{scope}[start chain = 4 going {above=of \tikzchainprevious.north},
            every on chain/.style={anchor=south},
            node distance = -0.15mm]
        \node[on chain, box, above = of ba2, yshift = 3mm] (20) {9};
    \end{scope}

    \begin{scope}[start chain = 5 going {above=of \tikzchainprevious.north},
            every on chain/.style={anchor=south},
            node distance = -0.15mm]
        \node[on chain, box, above = of ba3, yshift = 3mm] (30) {1};
        \node[on chain, box] {6};
        \node[on chain, box] {9};
        \node[on chain, box] {7};
    \end{scope}

    \begin{scope}[start chain = 6 going {above=of \tikzchainprevious.north},
            every on chain/.style={anchor=south},
            node distance = -0.15mm]
        \node[on chain, box, above = of ba4, yshift = 3mm] (40) {2};
    \end{scope}

    \begin{scope}[start chain = 7 going {above=of \tikzchainprevious.north},
            every on chain/.style={anchor=south},
            node distance = -0.15mm]
        \node[on chain, box, above = of ba5, yshift = 3mm] (50) {1};
        \node[on chain, box] {3};
        \node[on chain, box] {2};
        \node[on chain, box] {3};
        \node[on chain, box] {4};
        \node[on chain, box] {5};
        \node[on chain, box] {2};
    \end{scope}

    \begin{scope}[on background layer]
        \draw[gray, thick, dashed] ($(00.south west) - (1.5mm, 1.5mm)$) rectangle
                                ($(50.north east) + (1.5mm, 1.5mm)$);
    \end{scope}
\end{tikzpicture}
\caption{Multiqueues are a collection of priority queues. Deletions remove the minimal
         item from a randomly selected queue.}
\end{figure}
\end{frame}

% --------------------------------------------------------------------------------------------------
\section{\klsm} \label{sec:klsm}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:klsm}}
\begin{figure}[ht]
\centering
\begin{tikzpicture}[mindmap,
  level 1 concept/.append style={level distance = 90, sibling angle = 60},
  level 2 concept/.append style={level distance = 65, sibling angle = 45},
  every node/.append style={scale = 0.75}]

  \begin{scope}[mindmap, concept color = black!10]
    \node [concept] {\klsm}[clockwise from=-60]
      child {node [concept] (dlsm) {\ac{DLSM}}
        [clockwise from = 45]
        child {node [concept] {Thread-local}}
        child {node [concept] {Distributed}}
        child {node [concept] {Efficient}}
        child {node [concept] {Scalable}}
        child {node [concept] {Strict}}}
      child {node [concept] (slsm) {\ac{SLSM}}
        [clockwise from = -90]
        child {node [concept] {Shared}}
        child {node [concept] {Global}}
        child {node [concept] {Relaxed}}
        child {node [concept] {Global Bottleneck}}};
  \end{scope}
\end{tikzpicture}
\end{figure}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:klsm}}
\framesubtitle{The \ac{LSM}}
\begin{itemize}
\item Based on the concept of \acp{LSM}.
\item Maintain items in a logarithmic number of sorted arrays.
\item Array merges are the central operation.
\item Both insertions and deletions are in $O(\log n)$.
\end{itemize}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:klsm}}
\framesubtitle{\ac{LSM} Insertions}

\only<1>{
\begin{figure}
\begin{minipage}[t]{.5\textwidth}
\centering
\input{klsm_insertion_00.tex}
\subcaption{The initial state.}
\end{minipage}%
\begin{minipage}[t]{.5\textwidth}
\centering
\input{klsm_insertion_01.tex}
\subcaption{Item 7 inserted as a new block.}
\end{minipage}
\caption{Insertion of a new element into the \ac{LSM}.}
\label{fig:lsm_insertion}
\end{figure}
}

\only<2>{
\begin{figure}
\begin{minipage}[t]{.5\textwidth}
\centering
\input{klsm_insertion_02.tex}
\subcaption{After the first merge.}
\end{minipage}%
\begin{minipage}[t]{.5\textwidth}
\centering
\input{klsm_insertion_03.tex}
\subcaption{After the second merge.}
\end{minipage}
\caption{Insertion of a new element into the \ac{LSM}.}
\label{fig:lsm_insertion}
\end{figure}
}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:klsm}}
\framesubtitle{\ac{LSM} Deletions}

\begin{figure}
\begin{minipage}[t]{.5\textwidth}
\centering
\input{klsm_deletion_00.tex}
\subcaption{The initial state.}
\end{minipage}%
\begin{minipage}[t]{.5\textwidth}
\centering
\input{klsm_deletion_01.tex}
\subcaption{Item 0 marked as deleted.}
\end{minipage}
\caption{Deletion from the \ac{LSM}.}
\label{fig:lsm_deletion}
\end{figure}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:klsm}}
\framesubtitle{\ac{DLSM}}
\begin{itemize}
\item One \ac{LSM} per thread (thread-local).
\item Inter-thread communication only when local \ac{LSM} is empty (\lstinline|spy|).
\end{itemize}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:klsm}}
\framesubtitle{\ac{SLSM}}
\begin{itemize}
\item One global \ac{LSM} shared by all threads.
\item Insertions change the thread-local copy, then atomically replace the global
      \ac{LSM}.
\item Relaxation through so-called \emph{pivot} ranges.
\end{itemize}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:klsm}}
\framesubtitle{\ac{SLSM}}
\begin{figure}
\centering
\input{slsm_structure.tex}
\caption{Pivot ranges contain subset of $k + 1$ smallest elements.}
\label{fig:lsm_insertion}
\end{figure}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:klsm}}
\framesubtitle{\klsm: The $kP$ bound}
\begin{itemize}
\item \klsm deletions peek at \ac{DLSM} and \ac{SLSM} and remove the smaller item.
\item Each thread-local \ac{DLSM} has a capacity of $k$ \textrightarrow~ deletions skip at most $k(P - 1)$ items.
\item The \ac{SLSM} pivot range contains $k + 1$ smallest items \textrightarrow~ deletions skip at most $k$ items.
\item Combining both: at most $kP$ items skipped.
\end{itemize}
\end{frame}

% --------------------------------------------------------------------------------------------------
\section{Results} \label{sec:Results}
% --------------------------------------------------------------------------------------------------

\begin{frame}{\nameref{sec:Results}}
\framesubtitle{Throughput: Uniform workload, uniform key generation}

\begin{itemize}
\item Most commonly used benchmark.
\item Throughput: Number of operations per second.
\item Each thread: 50\% insertions, 50\% deletions.
\item Keys taken at random from 32-bit integer range.
\end{itemize}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:Results}}
\framesubtitle{Throughput: Uniform workload, uniform key generation}
\begin{figure}[ht]
\centering
<<fig = TRUE, width = 10, echo = FALSE>>=
pqplot_frame(filter_results("results/20151112_mars_uni_uni"))
@
\caption{\lstinline|mars| (80 core Intel Xeon at 2 GHz)}
\end{figure}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:Results}}
\framesubtitle{Throughput: Uniform workload, uniform key generation}
\begin{figure}[ht]
\centering
<<fig = TRUE, width = 10, echo = FALSE>>=
pq_colors <- brewer.pal(6, "Dark2")
names(pq_colors) <- c("klsm128", "klsm256", "klsm4096", "pheet256", "pheet4096")

pqplot_frame_palette(filter_results_to("results/20151112_mars_uni_uni", c("klsm256", "klsm4096", "pheet256", "pheet4096")), pq_colors)
@
\caption{\lstinline|mars|, comparison against the Pheet \klsm}
\end{figure}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:Results}}
\framesubtitle{Throughput: Uniform workload, ascending keygeneration}

\begin{itemize}
\item Keys taken from $[0, 512[ + t$.
\item Induces FIFO-like behavior.
\end{itemize}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:Results}}
\framesubtitle{Throughput: Uniform workload, ascending keygeneration}
\begin{figure}[ht]
\begin{center}
<<fig = TRUE, width = 10, echo = FALSE>>=
pqplot_frame(filter_results("results/20151112_mars_uni_asc"))
@
\end{center}
\caption{\lstinline|mars|.}
\end{figure}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:Results}}
\framesubtitle{Throughput: Split workload, uniform key generation}

\begin{itemize}
\item 50\% of threads insert, others delete.
\end{itemize}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:Results}}
\framesubtitle{Throughput: Split workload, uniform key generation}
\begin{figure}[ht]
\begin{center}
<<fig = TRUE, width = 10, echo = FALSE>>=
pqplot_frame(filter_results("results/20151112_mars_spl_uni"))
@
\end{center}
\caption{\lstinline|mars|.}
\end{figure}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:Results}}
\framesubtitle{Throughput: Split workload, ascending keygeneration}
\begin{figure}[ht]
\begin{center}
<<fig = TRUE, width = 10, echo = FALSE>>=
pqplot_frame(filter_results("results/20151112_mars_spl_asc"))
@
\end{center}
\caption{\lstinline|mars|.}
\end{figure}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:Results}}

\begin{itemize}
\item Performance directly dependent on utilization of the \ac{DLSM}.
\item Uniform/uniform benchmark: 95\% of all deletions from the \ac{DLSM}.
\end{itemize}
\end{frame}

% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:Results}}
\framesubtitle{Quality}

\begin{itemize}
\item And how good is the quality of results?
\item Determined by rank: for each \lstinline|delete_min|, if the removed item
is the $k$-smallest item at that time, it has rank $k$.
\end{itemize}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:Results}}
\framesubtitle{Quality}

\begin{table}[ht]
\footnotesize
\begin{center}
<<results = tex, echo = FALSE>>=
print_table("results/20151112_mars_uni_uni_q", c(20, 40, 80))
@
\end{center}
\caption{Uniform workload, uniform key generation benchmark
on \lstinline|mars|.}
\label{tbl:mars_uni_uni_q}
\end{table}
\end{frame}

% --------------------------------------------------------------------------------------------------
\section{Conclusion} \label{sec:conclusion}
% --------------------------------------------------------------------------------------------------

\begin{frame}{\nameref{sec:conclusion}}
\begin{itemize}
\item Standalone reimplementation completed successfully.
\item The \klsm can have exceptional performance.
\item \ldots under the right conditions.
\item The standard uniform workload, uniform key generation benchmark is not enough to evaluate performance.
\item Very good quality results in practice.
\item Multiqueues have lower peak performance, but have stable behavior in all experiments.

\end{itemize}
\end{frame}
% --------------------------------------------------------------------------------------------------
\begin{frame}{\nameref{sec:conclusion}}
\centering
Questions?
\end{frame}

\end{document}
